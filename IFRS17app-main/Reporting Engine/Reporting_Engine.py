import pandas as pd
import numpy as np
from datetime import datetime
from dateutil.rrule import *
import pymysql
from sqlalchemy import create_engine

assumptions = pd.read_csv("sample-Annual_v1_NDP.csv")
parameters = pd.read_csv("Parameters.csv")



class Reporting_Engine:

    def __init__(self, assumptions, parameters):
        
        
        
        def iferror(y):
            if len(y.index) == 0:
                return 0
            else:
                return y.item()
        
        self.BEL = []
        self.RA = []
        self.CSM = []
        self.TCL = []     
        self.AMC = []
        self.ARC = []

        self.Reins_BEL = []
        self.Reins_RA = []
        self.Reins_CSM = []
        self.Reins_TCL = []     
        self.Reins_AMC = []
        self.Reins_ARC = []


        
        self.Parameters = parameters
        
        
        if self.Parameters.loc[2, "Selection"] == "Annually":
            
            
            start = datetime.strptime(self.Parameters.loc[0, "Selection"],
                                          '%Y-%m-%d')
            end = datetime.strptime(self.Parameters.loc[1, "Selection"],
                                        '%Y-%m-%d')
            date_range = list(rrule(YEARLY,byyearday=-1, dtstart=start, until=end))
            dates = [date.strftime("%d/%m/%Y") for date in date_range]
            
        elif self.Parameters.loc[2, "Selection"] == "Quaterly":
            
            
            start = datetime.strptime(self.Parameters.loc[0, "Selection"],
                                          '%Y-%m-%d')
            end = datetime.strptime(self.Parameters.loc[1, "Selection"],
                                        '%Y-%m-%d')
            date_range = list(rrule(MONTHLY,interval = 3,bymonthday=-1, dtstart=start, until=end))
            dates = [date.strftime("%d/%m/%Y") for date in date_range]
            
            

        elif self.Parameters.loc[2, "Selection"] == "Monthly":

            start = datetime.strptime(self.Parameters.loc[0, "Selection"],
                                          '%Y-%m-%d')
            end = datetime.strptime(self.Parameters.loc[1, "Selection"],
                                          '%Y-%m-%d')
            date_range = list(rrule(MONTHLY,bymonthday=-1,dtstart=start, until=end))

            dates = [date.strftime("%d/%m/%Y") for date in date_range]
        dates = pd.Series(dates, name='dates')
        dates = dates.reset_index()
        
        map_dates_to_keys = dict(zip(dates['dates'], dates['index']))
        map_keys_to_dates = dict(zip(dates['index'], dates['dates']))


        assumptions['index'] = assumptions['Cohort'].map(map_dates_to_keys)
        assumptions = assumptions.reset_index()
        start_date = min(assumptions['index'])
        
        data = pd.pivot_table(
                assumptions,
                index=['index', 'Product', 'Sub-Product', 'Key'],
                aggfunc={
                    'Gross_BE': 'sum',
                    'Gross_LossC_BE': 'sum',
                    'Gross_RA': 'sum',
                    'Gross_LossC_RA': 'sum',
                    'Gross_CSM': 'sum',
                    'Gross_Actual_BE': 'sum',
                    'Gross_Actual_RA': 'sum',
                    'Gross_Actual_CSM': 'sum',
                    'Reins_BE': 'sum',
                    'Reins_LossC_BE': 'sum',
                    'Reins_RA': 'sum',
                    'Reins_LossC_RA': 'sum',
                    'Reins_CSM': 'sum',
                    'Reins_Actual_BE': 'sum',
                    'Reins_Actual_RA': 'sum',
                    'Reins_Actual_CSM': 'sum'
                    
                })

        data = data.reset_index()

        data_dict = {
                'assumption_' + str(i): grp
                for i, grp in data.groupby(['Product', 'Sub-Product'])
        }


        for group in data_dict:
            cohort1 = data_dict[group]
            product_name = cohort1['Product'].unique().item()
            subproduct_name = cohort1['Sub-Product'].unique().item()

            self.Assumptions = cohort1
            
            self.Reconciliation_of_Best_Estimate_Liability = pd.DataFrame(
                data=0,
                index=range(0,len(dates['index'])),
                columns=[
                    "Product", "Sub-Product", 
                    "Opening Balance",
                    "New Business",
                    "Change in Assumptions",
                    "Discounting-Unwinds",
                    "Experience Adjustment",
                    "Change in Fair Value of UI",
                    "Release to P&L",
                    "Adjustments to LIC",
                    "Onerous Contracts",
                    "Closing Balance"
                ])
                
            self.Reconciliation_of_Best_Estimate_Liability.index.name = 'Period'
            self.Reconciliation_of_Risk_Adjustment = self.Reconciliation_of_Best_Estimate_Liability.copy(
            )
            self.Reconciliation_of_Total_Contract_Liability = self.Reconciliation_of_Best_Estimate_Liability.copy(
            )
            self.Reconciliation_of_Contractual_Service_Margin = self.Reconciliation_of_Best_Estimate_Liability.copy(
            )
            self.Reconciliation_of_Reins_Best_Estimate_Liability = self.Reconciliation_of_Best_Estimate_Liability.copy(
            )
            self.Reconciliation_of_Reins_Risk_Adjustment = self.Reconciliation_of_Best_Estimate_Liability.copy(
            )
            self.Reconciliation_of_Reins_Total_Contract_Liability = self.Reconciliation_of_Best_Estimate_Liability.copy(
            )
            self.Reconciliation_of_Reins_Contractual_Service_Margin = self.Reconciliation_of_Best_Estimate_Liability.copy(
            )


            measure_abmc = [
                "Present value of future cash flows", "Risk Adjustment",
                "Contractual Service Margin", "Total"
            ]

            self.Analysis_by_measurement_component = pd.DataFrame(
                data=0,
                index=[0],
                columns=[
                    "Period",
                    "Product",
                    "Sub-Product",
                    "Measure",
                    'Net balance at 1 January',
                    'CSM recognised in profit or loss for the services provided',
                    'Risk Adjustment recognised for the risk expired',
                    'Experience adjustments',
                    'Changes that relate to current service',
                    'Changes in estimates that adjust the CSM',
                    'Changes in onerous contract losses or reversal of losses',
                    'Contracts initially recognised in the period',
                    'Changes that relate to future service',
                    'Adjustments to liabilities for incurred claims',
                    'Changes that relate to past service',
                    'Insurance service result',
                    'Finance expenses from insurance contracts issued',
                    'Effects of movements in exchange rates',
                    'Investment Component and Premium Refund',
                    'Total recognised in comprehensive income',
                    'Premiums received',
                    'Claims and other directly attributable expenses paid',
                    'Insurance acquisition cash flows',
                    'Total cash flows',
                    'Net balance at 31 December'
                ])
            measure_abrc = [
                "Liabilities for remaining coverage - Excluding loss component",
                "Liabilities for remaining coverage - Only Loss Component",
                "Liabilities for incurred claims", "Total"
            ]
            self.Reins_Analysis_by_measurement_component = self.Analysis_by_measurement_component.copy(
            )

            self.Analysis_by_remaining_coverage = pd.DataFrame(
                data=0,
                index=[0],
                columns=[
                    "Period", "Product", "Sub-Product", "Measure",
                    'Net balance at 1 January',
                    'Changes in the statement of profit and loss and OCI',
                    'Other contracts recognised',
                    'Expected incurred claims and Expenses',
                    'Amortisation of insurance acquisition cash flows',
                    'Losses and reversals of losses on onerous contracts',
                    'Adjustments to liabilities for incurred claims',
                    'Insurance service result',
                    'Net finance expenses from insurance contracts',
                    'Effect of movement in exchange rates',
                    'Investment components and premium refunds',
                    'Total changes in the statement of profit and loss and OCI',
                    'Premiums received',
                    'Actual claims and other expenses paid',
                    'Insurance acquisition cash flows', 'Total cash flows',
                    'Other items transfer in the statement of financial position',
                    'Net balance at 31 December'
                ])
            self.Reins_Analysis_by_remaining_coverage = self.Analysis_by_remaining_coverage.copy(
            )
            

            # Reconciliation of Best Estimate Liability(Gross)

            for i in range(0,len(dates['index'])):
                self.Reconciliation_of_Best_Estimate_Liability.loc[i, "Product"] = product_name
                self.Reconciliation_of_Best_Estimate_Liability.loc[i, "Sub-Product"] = subproduct_name

                if i == start_date:
                    self.Reconciliation_of_Best_Estimate_Liability.loc[i, "Opening Balance"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP000') &(self.Assumptions['index'] == i),'Gross_BE'])
                else:
                    self.Reconciliation_of_Best_Estimate_Liability.loc[i, "Opening Balance"] = self.Reconciliation_of_Best_Estimate_Liability.loc[i-1,"Closing Balance"] 

                self.Reconciliation_of_Best_Estimate_Liability.loc[i,"New Business"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP004') &(self.Assumptions['index'] == i),'Gross_BE'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP004') &(self.Assumptions['index'] == i),'Gross_LossC_BE']) + iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP001') &(self.Assumptions['index'] == i),'Gross_BE'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP001') &(self.Assumptions['index'] == i),'Gross_LossC_BE'])+ iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP005') &(self.Assumptions['index'] == i),'Gross_BE'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP005') &(self.Assumptions['index'] == i),'Gross_LossC_BE'])
                self.Reconciliation_of_Best_Estimate_Liability.loc[i,"Change in Assumptions"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'] )  + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Gross_LossC_BE']) 
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Reconciliation_of_Best_Estimate_Liability.loc[i, "Discounting-Unwinds"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])
                    self.Reconciliation_of_Best_Estimate_Liability.loc[i,"Change in Fair Value of UI"] = 0
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Reconciliation_of_Best_Estimate_Liability.loc[i, "Discounting-Unwinds"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i), 'Gross_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])
                    self.Reconciliation_of_Best_Estimate_Liability.loc[i,"Change in Fair Value of UI"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Gross_BE'] )
                
                self.Reconciliation_of_Best_Estimate_Liability.loc[i, "Experience Adjustment"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])
                self.Reconciliation_of_Best_Estimate_Liability.loc[i,"Release to P&L"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])
                self.Reconciliation_of_Best_Estimate_Liability.loc[i, "Adjustments to LIC"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])
                self.Reconciliation_of_Best_Estimate_Liability.loc[i, "Onerous Contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])
                self.Reconciliation_of_Best_Estimate_Liability.loc[i,"Closing Balance"] = self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Opening Balance"] + self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "New Business"] + self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Change in Assumptions"] + self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Discounting-Unwinds"] + self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Release to P&L"] + self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Adjustments to LIC"] + self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Experience Adjustment"] + self.Reconciliation_of_Best_Estimate_Liability.loc[i, "Onerous Contracts"]+self.Reconciliation_of_Best_Estimate_Liability.loc[i,"Change in Fair Value of UI"]
            
            # Reconciliation of Best Estimate Liability(Reins)

            for i in range(0,len(dates['index'])):
                self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i, "Product"] = product_name
                self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i, "Sub-Product"] = subproduct_name

                if i == start_date:
                    self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i, "Opening Balance"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP000') &(self.Assumptions['index'] == i),'Reins_BE'])
                else:
                    self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i, "Opening Balance"] = self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i-1,"Closing Balance"] 

                self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i,"New Business"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP004') &(self.Assumptions['index'] == i),'Reins_BE'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP004') &(self.Assumptions['index'] == i),'Reins_LossC_BE']) + iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP001') &(self.Assumptions['index'] == i),'Reins_BE'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP001') &(self.Assumptions['index'] == i),'Reins_LossC_BE'])+ iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP005') &(self.Assumptions['index'] == i),'Reins_BE'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP005') &(self.Assumptions['index'] == i),'Reins_LossC_BE'])
                self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i,"Change in Assumptions"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'] )  + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Reins_LossC_BE']) 
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i, "Discounting-Unwinds"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])
                    self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i,"Change in Fair Value of UI"] = 0
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i, "Discounting-Unwinds"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i), 'Reins_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])
                    self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i,"Change in Fair Value of UI"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Reins_BE'] )
                self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i, "Experience Adjustment"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])
                self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i,"Release to P&L"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])
                self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i, "Adjustments to LIC"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])
                self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i, "Onerous Contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])
                self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i,"Closing Balance"] = self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Opening Balance"] + self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "New Business"] + self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Change in Assumptions"] + self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Discounting-Unwinds"] + self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Release to P&L"] + self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Adjustments to LIC"] + self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Experience Adjustment"] + self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i, "Onerous Contracts"]+self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[i,"Change in Fair Value of UI"]

            # Reconciliation of Risk Adjustment(Gross)

            for i in range(0,len(dates['index'])):
                self.Reconciliation_of_Risk_Adjustment.loc[i, "Product"] = product_name
                self.Reconciliation_of_Risk_Adjustment.loc[i, "Sub-Product"] = subproduct_name
                if i == start_date:
                    self.Reconciliation_of_Risk_Adjustment.loc[i,"Opening Balance"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP000') &(self.Assumptions['index'] == i),'Gross_RA'])
                else:
                    self.Reconciliation_of_Risk_Adjustment.loc[i,"Opening Balance"] = self.Reconciliation_of_Risk_Adjustment.loc[i - 1, "Closing Balance"]

                self.Reconciliation_of_Risk_Adjustment.loc[i,"New Business"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP004') &(self.Assumptions['index'] == i),'Gross_RA'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP004') &(self.Assumptions['index'] == i),'Gross_LossC_RA']) + iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP001') &(self.Assumptions['index'] == i),'Gross_RA'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP001') &(self.Assumptions['index'] == i),'Gross_LossC_RA'])+ iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP005') &(self.Assumptions['index'] == i),'Gross_RA'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP005') &(self.Assumptions['index'] == i),'Gross_LossC_RA'])
                self.Reconciliation_of_Risk_Adjustment.loc[i,"Change in Assumptions"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'] )  + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Gross_LossC_RA']) 
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Reconciliation_of_Risk_Adjustment.loc[i, "Discounting-Unwinds"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])
                    self.Reconciliation_of_Risk_Adjustment.loc[i,"Change in Fair Value of UI"] = 0
                elif self.Parameters.loc[3, "Selection"] == "VFA":   
                    self.Reconciliation_of_Risk_Adjustment.loc[i, "Discounting-Unwinds"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i), 'Gross_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])
                    self.Reconciliation_of_Risk_Adjustment.loc[i,"Change in Fair Value of UI"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Gross_BE'] )
                
                self.Reconciliation_of_Risk_Adjustment.loc[i, "Experience Adjustment"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])
                self.Reconciliation_of_Risk_Adjustment.loc[i,"Release to P&L"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Gross_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])
                self.Reconciliation_of_Risk_Adjustment.loc[i, "Adjustments to LIC"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])
                self.Reconciliation_of_Risk_Adjustment.loc[i, "Onerous Contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])
                self.Reconciliation_of_Risk_Adjustment.loc[i,"Closing Balance"] = self.Reconciliation_of_Risk_Adjustment.loc[ i, "Opening Balance"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "New Business"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Change in Assumptions"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Discounting-Unwinds"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Release to P&L"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Adjustments to LIC"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Experience Adjustment"] + self.Reconciliation_of_Risk_Adjustment.loc[i, "Onerous Contracts"]+self.Reconciliation_of_Risk_Adjustment.loc[i,"Change in Fair Value of UI"]

            # Reconciliation of Risk Adjustment(Reins)

            for i in range(0,len(dates['index'])):
                self.Reconciliation_of_Reins_Risk_Adjustment.loc[i, "Product"] = product_name
                self.Reconciliation_of_Reins_Risk_Adjustment.loc[i, "Sub-Product"] = subproduct_name
                if i == start_date:
                    self.Reconciliation_of_Reins_Risk_Adjustment.loc[i,"Opening Balance"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP000') &(self.Assumptions['index'] == i),'Reins_RA'])
                else:
                    self.Reconciliation_of_Reins_Risk_Adjustment.loc[i,"Opening Balance"] = self.Reconciliation_of_Reins_Risk_Adjustment.loc[i - 1, "Closing Balance"]

                self.Reconciliation_of_Reins_Risk_Adjustment.loc[i,"New Business"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP004') &(self.Assumptions['index'] == i),'Reins_RA'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP004') &(self.Assumptions['index'] == i),'Reins_LossC_RA']) + iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP001') &(self.Assumptions['index'] == i),'Reins_RA'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP001') &(self.Assumptions['index'] == i),'Reins_LossC_RA'])+ iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP005') &(self.Assumptions['index'] == i),'Reins_RA'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP005') &(self.Assumptions['index'] == i),'Reins_LossC_RA'])
                self.Reconciliation_of_Reins_Risk_Adjustment.loc[i,"Change in Assumptions"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'] )  + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Reins_LossC_RA']) 
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Reconciliation_of_Reins_Risk_Adjustment.loc[i, "Discounting-Unwinds"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])
                    self.Reconciliation_of_Reins_Risk_Adjustment.loc[i,"Change in Fair Value of UI"] = 0
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Reconciliation_of_Reins_Risk_Adjustment.loc[i, "Discounting-Unwinds"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i), 'Reins_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])
                    self.Reconciliation_of_Reins_Risk_Adjustment.loc[i,"Change in Fair Value of UI"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Reins_BE'] )
                self.Reconciliation_of_Reins_Risk_Adjustment.loc[i, "Experience Adjustment"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])
                self.Reconciliation_of_Reins_Risk_Adjustment.loc[i,"Release to P&L"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Reins_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])
                self.Reconciliation_of_Reins_Risk_Adjustment.loc[i, "Adjustments to LIC"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])
                self.Reconciliation_of_Reins_Risk_Adjustment.loc[i, "Onerous Contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])
                self.Reconciliation_of_Reins_Risk_Adjustment.loc[i,"Closing Balance"] = self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Opening Balance"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "New Business"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Change in Assumptions"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Discounting-Unwinds"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Release to P&L"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Adjustments to LIC"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Experience Adjustment"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[i, "Onerous Contracts"]+self.Reconciliation_of_Reins_Risk_Adjustment.loc[i,"Change in Fair Value of UI"]

            # Reconciliation of Contractual Service Margin (Gross)

            for i in range(0,len(dates['index'])):
                self.Reconciliation_of_Contractual_Service_Margin.loc[i, "Product"] = product_name
                self.Reconciliation_of_Contractual_Service_Margin.loc[i, "Sub-Product"] = subproduct_name

                if i == start_date:
                    self.Reconciliation_of_Contractual_Service_Margin.loc[i,"Opening Balance"] = iferror(-(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP000')& (self.Assumptions['index'] == i),'Gross_CSM']))

                else:
                    self.Reconciliation_of_Contractual_Service_Margin.loc[i,"Opening Balance"] = self.Reconciliation_of_Contractual_Service_Margin.loc[i - 1, "Closing Balance"]

                self.Reconciliation_of_Contractual_Service_Margin.loc[i,"New Business"] = (iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP004')& (self.Assumptions['index'] == i),'Gross_CSM']) + iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP001')& (self.Assumptions['index'] == i),'Gross_CSM'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP005')& (self.Assumptions['index'] == i),'Gross_CSM']))
                self.Reconciliation_of_Contractual_Service_Margin.loc[i, "Change in Assumptions"] = (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Gross_CSM'])  + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Gross_CSM']))
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Reconciliation_of_Contractual_Service_Margin.loc[i, "Discounting-Unwinds"] = (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_CSM'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_CSM']))
                    self.Reconciliation_of_Contractual_Service_Margin.loc[i,"Change in Fair Value of UI"] = 0
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Reconciliation_of_Contractual_Service_Margin.loc[i, "Discounting-Unwinds"] = (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_CSM'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_CSM']))+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i), 'Gross_CSM'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Gross_CSM'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Gross_CSM'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Gross_CSM'] )
                    self.Reconciliation_of_Contractual_Service_Margin.loc[i,"Change in Fair Value of UI"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Reins_BE'] )
                
                self.Reconciliation_of_Contractual_Service_Margin.loc[i, "Experience Adjustment"] =(iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Gross_CSM']))
                self.Reconciliation_of_Contractual_Service_Margin.loc[i, "Release to P&L"] = (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Gross_CSM']))
                self.Reconciliation_of_Contractual_Service_Margin.loc[i, "Adjustments to LIC"] = (iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Gross_CSM']))
                self.Reconciliation_of_Contractual_Service_Margin.loc[i, "Onerous Contracts"] = (iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Gross_CSM']))
                self.Reconciliation_of_Contractual_Service_Margin.loc[i,"Closing Balance"] = self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Opening Balance"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "New Business"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Change in Assumptions"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Discounting-Unwinds"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Release to P&L"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Adjustments to LIC"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Experience Adjustment"] + self.Reconciliation_of_Contractual_Service_Margin.loc[i, "Onerous Contracts"]+self.Reconciliation_of_Contractual_Service_Margin.loc[i,"Change in Fair Value of UI"]

            # Reconciliation of Contractual Service Margin (Reins)
            for i in range(0,len(dates['index'])):
                self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i, "Product"] = product_name
                self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i, "Sub-Product"] = subproduct_name

                if i == start_date:
                    self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i,"Opening Balance"] = iferror((self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP000')& (self.Assumptions['index'] == i),'Reins_CSM']))

                else:
                    self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i,"Opening Balance"] = self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i - 1, "Closing Balance"]

                self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i,"New Business"] = (iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP004')& (self.Assumptions['index'] == i),'Reins_CSM']) + iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP001')& (self.Assumptions['index'] == i),'Reins_CSM'])+iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP005')& (self.Assumptions['index'] == i),'Reins_CSM']))
                self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i, "Change in Assumptions"] = (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Reins_CSM'])  + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Reins_CSM']))
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i, "Discounting-Unwinds"] = (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_CSM'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_CSM']))
                    self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i,"Change in Fair Value of UI"] = 0 
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i, "Discounting-Unwinds"] = (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_CSM'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_CSM']))+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i), 'Reins_CSM'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Reins_CSM'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Reins_CSM'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Reins_CSM'] )
                    self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i,"Change in Fair Value of UI"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Reins_BE'] )
                self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i, "Experience Adjustment"] =(iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Reins_CSM']))
                self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i, "Release to P&L"] = (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Reins_CSM']))
                self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i, "Adjustments to LIC"] = (iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Reins_CSM']))
                self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i, "Onerous Contracts"] = (iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Reins_CSM']))
                self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i,"Closing Balance"] = self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Opening Balance"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "New Business"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Change in Assumptions"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Discounting-Unwinds"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Release to P&L"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Adjustments to LIC"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Experience Adjustment"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i, "Onerous Contracts"]+self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[i,"Change in Fair Value of UI"]

            # Reconciliation of Total Contract Liability (Gross)

            for i in range(0,len(dates['index'])):
                self.Reconciliation_of_Total_Contract_Liability.loc[i, "Product"] = product_name
                self.Reconciliation_of_Total_Contract_Liability.loc[i, "Sub-Product"] = subproduct_name
                self.Reconciliation_of_Total_Contract_Liability.loc[i,"Opening Balance"] = self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Opening Balance"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Opening Balance"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Opening Balance"]
                self.Reconciliation_of_Total_Contract_Liability.loc[i,"New Business"] = self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "New Business"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "New Business"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "New Business"]
                self.Reconciliation_of_Total_Contract_Liability.loc[i,"Change in Assumptions"] = self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Change in Assumptions"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Change in Assumptions"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Change in Assumptions"]
                self.Reconciliation_of_Total_Contract_Liability.loc[i,"Discounting-Unwinds"] = self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Discounting-Unwinds"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Discounting-Unwinds"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Discounting-Unwinds"]
                self.Reconciliation_of_Total_Contract_Liability.loc[i, "Experience Adjustment"] = self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Experience Adjustment"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Experience Adjustment"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Experience Adjustment"]
                self.Reconciliation_of_Total_Contract_Liability.loc[i,"Change in Fair Value of UI"] =self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Change in Fair Value of UI"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Change in Fair Value of UI"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Change in Fair Value of UI"]
                self.Reconciliation_of_Total_Contract_Liability.loc[i,"Release to P&L"] = self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Release to P&L"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Release to P&L"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Release to P&L"]
                self.Reconciliation_of_Total_Contract_Liability.loc[i,"Adjustments to LIC"] = self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Adjustments to LIC"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Adjustments to LIC"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Adjustments to LIC"]
                self.Reconciliation_of_Total_Contract_Liability.loc[i, "Onerous Contracts"] = self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Onerous Contracts"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Onerous Contracts"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Onerous Contracts"]
                self.Reconciliation_of_Total_Contract_Liability.loc[i,"Closing Balance"] = self.Reconciliation_of_Best_Estimate_Liability.loc[ i, "Closing Balance"] + self.Reconciliation_of_Risk_Adjustment.loc[ i, "Closing Balance"] + self.Reconciliation_of_Contractual_Service_Margin.loc[ i, "Closing Balance"]

            # Reconciliation of Total Contract Liability (Reins)

            for i in range(0,len(dates['index'])):
                self.Reconciliation_of_Reins_Total_Contract_Liability.loc[i, "Product"] = product_name
                self.Reconciliation_of_Reins_Total_Contract_Liability.loc[i, "Sub-Product"] = subproduct_name
                self.Reconciliation_of_Reins_Total_Contract_Liability.loc[i,"Opening Balance"] = self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Opening Balance"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Opening Balance"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Opening Balance"]
                self.Reconciliation_of_Reins_Total_Contract_Liability.loc[i,"New Business"] = self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "New Business"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "New Business"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "New Business"]
                self.Reconciliation_of_Reins_Total_Contract_Liability.loc[i,"Change in Assumptions"] = self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Change in Assumptions"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Change in Assumptions"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Change in Assumptions"]
                self.Reconciliation_of_Reins_Total_Contract_Liability.loc[i,"Discounting-Unwinds"] = self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Discounting-Unwinds"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Discounting-Unwinds"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Discounting-Unwinds"]
                self.Reconciliation_of_Reins_Total_Contract_Liability.loc[i, "Experience Adjustment"] = self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Experience Adjustment"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Experience Adjustment"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Experience Adjustment"]
                self.Reconciliation_of_Reins_Total_Contract_Liability.loc[i,"Change in Fair Value of UI"] = self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Change in Fair Value of UI"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Change in Fair Value of UI"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Change in Fair Value of UI"]
                self.Reconciliation_of_Reins_Total_Contract_Liability.loc[i,"Release to P&L"] = self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Release to P&L"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Release to P&L"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Release to P&L"]
                self.Reconciliation_of_Reins_Total_Contract_Liability.loc[i,"Adjustments to LIC"] = self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Adjustments to LIC"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Adjustments to LIC"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Adjustments to LIC"]
                self.Reconciliation_of_Reins_Total_Contract_Liability.loc[i, "Onerous Contracts"] = self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Onerous Contracts"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Onerous Contracts"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Onerous Contracts"]
                self.Reconciliation_of_Reins_Total_Contract_Liability.loc[i,"Closing Balance"] = self.Reconciliation_of_Reins_Best_Estimate_Liability.loc[ i, "Closing Balance"] + self.Reconciliation_of_Reins_Risk_Adjustment.loc[ i, "Closing Balance"] + self.Reconciliation_of_Reins_Contractual_Service_Margin.loc[ i, "Closing Balance"]

            
            
            # Analysis by measurement Component
            count = 0
            for i in range(0,len(dates['index'])):
                for s in measure_abmc:
                    entry = pd.DataFrame(
                        {
                            'Period':
                            i,
                            "Product":
                            product_name,
                            "Sub-Product":
                            subproduct_name,
                            'Measure':
                            s,
                            'Net balance at 1 January':
                            0,
                            'CSM recognised in profit or loss for the services provided':
                            0,
                            'Risk Adjustment recognised for the risk expired':
                            0,
                            'Experience adjustments':
                            0,
                            'Changes that relate to current service':
                            0,
                            'Changes in estimates that adjust the CSM':
                            0,
                            'Changes in onerous contract losses or reversal of losses':
                            0,
                            'Contracts initially recognised in the period':
                            0,
                            'Changes that relate to future service':
                            0,
                            'Adjustments to liabilities for incurred claims':
                            0,
                            'Changes that relate to past service':
                            0,
                            'Insurance service result':
                            0,
                            'Finance expenses from insurance contracts issued':
                            0,
                            'Effects of movements in exchange rates':
                            0,
                            'Investment Component and Premium Refund':
                            0,
                            'Total recognised in comprehensive income':
                            0,
                            'Premiums received':
                            0,
                            'Claims and other directly attributable expenses paid':
                            0,
                            'Insurance acquisition cash flows':
                            0,
                            'Total cash flows':
                            0,
                            'Net balance at 31 December':
                            0
                        },
                        index=[0])
                    if count == 0:
                        self.Analysis_by_measurement_component = entry
                        self.Reins_Analysis_by_measurement_component = entry
                        
                    else:
                        self.Analysis_by_measurement_component = pd.concat(
                            [self.Analysis_by_measurement_component, entry],
                            axis=0)
                        self.Reins_Analysis_by_measurement_component = pd.concat(
                            [self.Reins_Analysis_by_measurement_component, entry],
                            axis=0)
                        
                    count += 1
                # Analysis by measurement Component (Gross)
                if i == start_date:
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"),"Net balance at 1 January"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP000') &(self.Assumptions['index'] == i),'Gross_BE']) 
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Net balance at 1 January"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP000') &(self.Assumptions['index'] == i),'Gross_RA'])
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"),"Net balance at 1 January"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP000') &(self.Assumptions['index'] == i),'Gross_CSM'])
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Net balance at 1 January"] = self.Analysis_by_measurement_component.loc[( self.Analysis_by_measurement_component['Period'] == i ) & ( self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Net balance at 1 January"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Net balance at 1 January"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Net balance at 1 January"]
                else:
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Net balance at 1 January"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i - 1) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Net balance at 31 December"]
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Net balance at 1 January"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i - 1) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Net balance at 31 December"]
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "Net balance at 1 January"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i - 1) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Net balance at 31 December"]
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Net balance at 1 January"] = self.Analysis_by_measurement_component.loc[( self.Analysis_by_measurement_component['Period'] == i ) & ( self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Net balance at 1 January"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Net balance at 1 January"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Net balance at 1 January"]

                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) &(self.Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"),"Experience adjustments"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Risk Adjustment recognised for the risk expired"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Gross_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "CSM recognised in profit or loss for the services provided"] = ( iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Gross_CSM']))
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "CSM recognised in profit or loss for the services provided"] = ( iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Gross_CSM'])) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i), 'Gross_CSM']) 
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i), "Changes that relate to current service"] = self.Analysis_by_measurement_component.loc[( self.Analysis_by_measurement_component['Period'] == i ), "CSM recognised in profit or loss for the services provided"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i), "Risk Adjustment recognised for the risk expired"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i ), "Experience adjustments"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Experience adjustments"] = self.Analysis_by_measurement_component.loc[( self.Analysis_by_measurement_component['Period'] == i ) & ( self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Experience adjustments"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Experience adjustments"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Experience adjustments"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Risk Adjustment recognised for the risk expired"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Risk Adjustment recognised for the risk expired"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Risk Adjustment recognised for the risk expired"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Risk Adjustment recognised for the risk expired"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "CSM recognised in profit or loss for the services provided"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "CSM recognised in profit or loss for the services provided"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "CSM recognised in profit or loss for the services provided"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "CSM recognised in profit or loss for the services provided"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Changes that relate to current service"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Changes that relate to current service"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Changes that relate to current service"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Changes that relate to current service"]

                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) &(self.Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"),"Changes in estimates that adjust the CSM"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i), 'Gross_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) &(self.Analysis_by_measurement_component['Measure'] =="Risk Adjustment"),"Changes in estimates that adjust the CSM"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i), 'Gross_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i), 'Gross_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) &(self.Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"),"Changes in estimates that adjust the CSM"] = (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Gross_CSM']))
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Changes in onerous contract losses or reversal of losses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Changes in onerous contract losses or reversal of losses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "Changes in onerous contract losses or reversal of losses"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Gross_CSM'])
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Contracts initially recognised in the period"] = self.Reconciliation_of_Best_Estimate_Liability.loc[i, "New Business"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Contracts initially recognised in the period"] = self.Reconciliation_of_Risk_Adjustment.loc[i, "New Business"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "Contracts initially recognised in the period"] = self.Reconciliation_of_Contractual_Service_Margin.loc[i, "New Business"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i), "Changes that relate to future service"] = self.Analysis_by_measurement_component.loc[( self.Analysis_by_measurement_component['Period'] == i ), "Changes in estimates that adjust the CSM"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i), "Changes in onerous contract losses or reversal of losses"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i ), "Contracts initially recognised in the period"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Changes in estimates that adjust the CSM"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Changes in estimates that adjust the CSM"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Changes in estimates that adjust the CSM"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Changes in estimates that adjust the CSM"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Changes in onerous contract losses or reversal of losses"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Changes in onerous contract losses or reversal of losses"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Changes in onerous contract losses or reversal of losses"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Changes in onerous contract losses or reversal of losses"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Contracts initially recognised in the period"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Contracts initially recognised in the period"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Contracts initially recognised in the period"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Contracts initially recognised in the period"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Changes that relate to future service"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Changes that relate to future service"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Changes that relate to future service"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Changes that relate to future service"]

                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) &(self.Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"),"Adjustments to liabilities for incurred claims"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) &(self.Analysis_by_measurement_component['Measure'] =="Risk Adjustment"),"Adjustments to liabilities for incurred claims"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) &(self.Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"),"Adjustments to liabilities for incurred claims"] = ( iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Gross_CSM']))
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i), "Changes that relate to past service"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i), "Adjustments to liabilities for incurred claims"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Adjustments to liabilities for incurred claims"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Adjustments to liabilities for incurred claims"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Adjustments to liabilities for incurred claims"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Adjustments to liabilities for incurred claims"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Changes that relate to past service"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Changes that relate to past service"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Changes that relate to past service"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Changes that relate to past service"]

                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i), "Insurance service result"] = self.Analysis_by_measurement_component.loc[( self.Analysis_by_measurement_component['Period'] == i ), "Changes that relate to current service"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i), "Changes that relate to future service"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i ), "Changes that relate to past service"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Insurance service result"] = self.Analysis_by_measurement_component.loc[( self.Analysis_by_measurement_component['Period'] == i ) & ( self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Insurance service result"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Insurance service result"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Insurance service result"]
                
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Finance expenses from insurance contracts issued"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Finance expenses from insurance contracts issued"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) &(self.Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"),"Finance expenses from insurance contracts issued"] = ( iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_CSM']))
                    
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Finance expenses from insurance contracts issued"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Gross_LossC_BE'])
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Finance expenses from insurance contracts issued"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Gross_LossC_RA'])
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) &(self.Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"),"Finance expenses from insurance contracts issued"] = ( iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Gross_CSM']))+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Gross_CSM'])
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i), "Investment Component and Premium Refund"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i), "Finance expenses from insurance contracts issued"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i ), "Effects of movements in exchange rates"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Finance expenses from insurance contracts issued"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Finance expenses from insurance contracts issued"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Finance expenses from insurance contracts issued"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Finance expenses from insurance contracts issued"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Investment Component and Premium Refund"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Investment Component and Premium Refund"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Investment Component and Premium Refund"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Investment Component and Premium Refund"]

                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i), "Total recognised in comprehensive income"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i), "Insurance service result"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i ), "Investment Component and Premium Refund"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Total recognised in comprehensive income"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Total recognised in comprehensive income"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Total recognised in comprehensive income"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Total recognised in comprehensive income"]

                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) &(self.Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"),"Premiums received"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP002') & (self.Assumptions['index'] == i), 'Gross_Actual_BE'])
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Claims and other directly attributable expenses paid"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i), 'Gross_Actual_BE'])
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Risk Adjustement"), "Claims and other directly attributable expenses paid"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i), 'Gross_Actual_RA'])
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "Claims and other directly attributable expenses paid"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i), 'Gross_Actual_CSM'])
                    
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Claims and other directly attributable expenses paid"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i), 'Gross_Actual_BE'])+iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i), 'Gross_Actual_BE'])
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Risk Adjustement"), "Claims and other directly attributable expenses paid"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i), 'Gross_Actual_RA'])+iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i), 'Gross_Actual_RA'])
                    self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "Claims and other directly attributable expenses paid"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i), 'Gross_Actual_CSM'])+iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i), 'Gross_Actual_CSM'])
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) &(self.Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"),"Insurance acquisition cash flows"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i), 'Gross_Actual_BE'])
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i), "Total cash flows"] = self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i), "Premiums received"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i), "Claims and other directly attributable expenses paid"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i ), "Insurance acquisition cash flows"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Premiums received"] = self.Analysis_by_measurement_component.loc[( self.Analysis_by_measurement_component['Period'] == i ) & ( self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Premiums received"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Premiums received"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Premiums received"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Claims and other directly attributable expenses paid"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Claims and other directly attributable expenses paid"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Claims and other directly attributable expenses paid"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Claims and other directly attributable expenses paid"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Insurance acquisition cash flows"] = self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Insurance acquisition cash flows"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Insurance acquisition cash flows"] + self.Analysis_by_measurement_component.loc[ (self. Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Insurance acquisition cash flows"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Total cash flows"] = self.Analysis_by_measurement_component.loc[( self.Analysis_by_measurement_component['Period'] == i ) & ( self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Total cash flows"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Total cash flows"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Total cash flows"]

                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i), "Net balance at 31 December"] = self.Analysis_by_measurement_component.loc[( self.Analysis_by_measurement_component['Period'] == i ), "Net balance at 1 January"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i), "Total recognised in comprehensive income"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i ), "Total cash flows"]
                self.Analysis_by_measurement_component.loc[(self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] =="Total"), "Net balance at 31 December"] = self.Analysis_by_measurement_component.loc[( self.Analysis_by_measurement_component['Period'] == i ) & ( self.Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Net balance at 31 December"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Net balance at 31 December"] + self.Analysis_by_measurement_component.loc[ (self.Analysis_by_measurement_component['Period'] == i) & (self.Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Net balance at 31 December"]
            
                # Analysis by measurement Component (Reins)
                if i == start_date:
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"),"Net balance at 1 January"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP000') &(self.Assumptions['index'] == i),'Reins_BE']) 
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Net balance at 1 January"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP000') &(self.Assumptions['index'] == i),'Reins_RA'])
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"),"Net balance at 1 January"] = iferror(self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP000') &(self.Assumptions['index'] == i),'Reins_CSM'])
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Net balance at 1 January"] = self.Reins_Analysis_by_measurement_component.loc[( self.Reins_Analysis_by_measurement_component['Period'] == i ) & ( self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Net balance at 1 January"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Net balance at 1 January"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Net balance at 1 January"]
                else:
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Net balance at 1 January"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i - 1) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Net balance at 31 December"]
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Net balance at 1 January"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i - 1) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Net balance at 31 December"]
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "Net balance at 1 January"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i - 1) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Net balance at 31 December"]
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Net balance at 1 January"] = self.Reins_Analysis_by_measurement_component.loc[( self.Reins_Analysis_by_measurement_component['Period'] == i ) & ( self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Net balance at 1 January"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Net balance at 1 January"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Net balance at 1 January"]

                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) &(self.Reins_Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"),"Experience adjustments"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Risk Adjustment recognised for the risk expired"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Reins_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "CSM recognised in profit or loss for the services provided"] = ( iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Reins_CSM']))
                
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "CSM recognised in profit or loss for the services provided"] = ( iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i), 'Reins_CSM']))+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i), 'Reins_CSM'])
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i), "Changes that relate to current service"] = self.Reins_Analysis_by_measurement_component.loc[( self.Reins_Analysis_by_measurement_component['Period'] == i ), "CSM recognised in profit or loss for the services provided"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i), "Risk Adjustment recognised for the risk expired"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i ), "Experience adjustments"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Experience adjustments"] = self.Reins_Analysis_by_measurement_component.loc[( self.Reins_Analysis_by_measurement_component['Period'] == i ) & ( self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Experience adjustments"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Experience adjustments"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Experience adjustments"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Risk Adjustment recognised for the risk expired"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Risk Adjustment recognised for the risk expired"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Risk Adjustment recognised for the risk expired"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Risk Adjustment recognised for the risk expired"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "CSM recognised in profit or loss for the services provided"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "CSM recognised in profit or loss for the services provided"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "CSM recognised in profit or loss for the services provided"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "CSM recognised in profit or loss for the services provided"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Changes that relate to current service"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Changes that relate to current service"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Changes that relate to current service"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Changes that relate to current service"]

                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) &(self.Reins_Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"),"Changes in estimates that adjust the CSM"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i), 'Reins_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) &(self.Reins_Analysis_by_measurement_component['Measure'] =="Risk Adjustment"),"Changes in estimates that adjust the CSM"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i), 'Reins_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i), 'Reins_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) &(self.Reins_Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"),"Changes in estimates that adjust the CSM"] = ( iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i), 'Reins_CSM']))
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Changes in onerous contract losses or reversal of losses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Changes in onerous contract losses or reversal of losses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "Changes in onerous contract losses or reversal of losses"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i), 'Reins_CSM'])
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Contracts initially recognised in the period"] = self.Reconciliation_of_Best_Estimate_Liability.loc[i, "New Business"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Contracts initially recognised in the period"] = self.Reconciliation_of_Risk_Adjustment.loc[i, "New Business"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "Contracts initially recognised in the period"] = self.Reconciliation_of_Contractual_Service_Margin.loc[i, "New Business"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i), "Changes that relate to future service"] = self.Reins_Analysis_by_measurement_component.loc[( self.Reins_Analysis_by_measurement_component['Period'] == i ), "Changes in estimates that adjust the CSM"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i), "Changes in onerous contract losses or reversal of losses"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i ), "Contracts initially recognised in the period"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Changes in estimates that adjust the CSM"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Changes in estimates that adjust the CSM"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Changes in estimates that adjust the CSM"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Changes in estimates that adjust the CSM"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Changes in onerous contract losses or reversal of losses"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Changes in onerous contract losses or reversal of losses"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Changes in onerous contract losses or reversal of losses"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Changes in onerous contract losses or reversal of losses"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Contracts initially recognised in the period"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Contracts initially recognised in the period"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Contracts initially recognised in the period"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Contracts initially recognised in the period"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Changes that relate to future service"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Changes that relate to future service"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Changes that relate to future service"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Changes that relate to future service"]

                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) &(self.Reins_Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"),"Adjustments to liabilities for incurred claims"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) &(self.Reins_Analysis_by_measurement_component['Measure'] =="Risk Adjustment"),"Adjustments to liabilities for incurred claims"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) &(self.Reins_Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"),"Adjustments to liabilities for incurred claims"] = ( iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i), 'Reins_CSM']))
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i), "Changes that relate to past service"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i), "Adjustments to liabilities for incurred claims"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Adjustments to liabilities for incurred claims"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Adjustments to liabilities for incurred claims"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Adjustments to liabilities for incurred claims"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Adjustments to liabilities for incurred claims"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Changes that relate to past service"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Changes that relate to past service"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Changes that relate to past service"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Changes that relate to past service"]

                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i), "Insurance service result"] = self.Reins_Analysis_by_measurement_component.loc[( self.Reins_Analysis_by_measurement_component['Period'] == i ), "Changes that relate to current service"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i), "Changes that relate to future service"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i ), "Changes that relate to past service"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Insurance service result"] = self.Reins_Analysis_by_measurement_component.loc[( self.Reins_Analysis_by_measurement_component['Period'] == i ) & ( self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Insurance service result"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Insurance service result"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Insurance service result"]
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Finance expenses from insurance contracts issued"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Finance expenses from insurance contracts issued"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) &(self.Reins_Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"),"Finance expenses from insurance contracts issued"] = ( iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_CSM']))
                    
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Finance expenses from insurance contracts issued"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Reins_LossC_BE'])
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Risk Adjustment"), "Finance expenses from insurance contracts issued"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_LossC_RA'])
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) &(self.Reins_Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"),"Finance expenses from insurance contracts issued"] = ( iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i), 'Reins_CSM']))+iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i), 'Reins_CSM'])
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i), "Investment Component and Premium Refund"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i), "Finance expenses from insurance contracts issued"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i ), "Effects of movements in exchange rates"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Finance expenses from insurance contracts issued"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Finance expenses from insurance contracts issued"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Finance expenses from insurance contracts issued"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Finance expenses from insurance contracts issued"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Investment Component and Premium Refund"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Investment Component and Premium Refund"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Investment Component and Premium Refund"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Investment Component and Premium Refund"]

                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i), "Total recognised in comprehensive income"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i), "Insurance service result"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i ), "Investment Component and Premium Refund"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Total recognised in comprehensive income"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Total recognised in comprehensive income"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Total recognised in comprehensive income"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Total recognised in comprehensive income"]

                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) &(self.Reins_Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"),"Premiums received"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP002') & (self.Assumptions['index'] == i), 'Reins_Actual_BE'])
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Claims and other directly attributable expenses paid"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i), 'Reins_Actual_BE'])
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Risk Adjustement"), "Claims and other directly attributable expenses paid"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i), 'Reins_Actual_RA'])
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "Claims and other directly attributable expenses paid"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i), 'Reins_Actual_CSM'])   
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"), "Claims and other directly attributable expenses paid"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i), 'Reins_Actual_BE'])+iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i), 'Reins_Actual_BE'])
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Risk Adjustement"), "Claims and other directly attributable expenses paid"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i), 'Reins_Actual_RA'])+iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i), 'Reins_Actual_RA'])
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Contractual Service Margin"), "Claims and other directly attributable expenses paid"] = iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i), 'Reins_Actual_CSM'])+iferror( self.Assumptions.loc[(self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i), 'Reins_Actual_CSM'])
                    self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) &(self.Reins_Analysis_by_measurement_component['Measure'] =="Present value of future cash flows"),"Insurance acquisition cash flows"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i), 'Reins_Actual_BE'])
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i), "Total cash flows"] = self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i), "Premiums received"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i), "Claims and other directly attributable expenses paid"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i ), "Insurance acquisition cash flows"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Premiums received"] = self.Reins_Analysis_by_measurement_component.loc[( self.Reins_Analysis_by_measurement_component['Period'] == i ) & ( self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Premiums received"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Premiums received"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Premiums received"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Claims and other directly attributable expenses paid"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Claims and other directly attributable expenses paid"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Claims and other directly attributable expenses paid"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Claims and other directly attributable expenses paid"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Insurance acquisition cash flows"] = self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows"), "Insurance acquisition cash flows"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Insurance acquisition cash flows"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Insurance acquisition cash flows"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Total cash flows"] = self.Reins_Analysis_by_measurement_component.loc[( self.Reins_Analysis_by_measurement_component['Period'] == i ) & ( self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Total cash flows"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Total cash flows"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Total cash flows"]

                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i), "Net balance at 31 December"] = self.Reins_Analysis_by_measurement_component.loc[( self.Reins_Analysis_by_measurement_component['Period'] == i ), "Net balance at 1 January"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i), "Total recognised in comprehensive income"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i ), "Total cash flows"]
                self.Reins_Analysis_by_measurement_component.loc[(self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] =="Total"), "Net balance at 31 December"] = self.Reins_Analysis_by_measurement_component.loc[( self.Reins_Analysis_by_measurement_component['Period'] == i ) & ( self.Reins_Analysis_by_measurement_component['Measure'] == "Present value of future cash flows" ), "Net balance at 31 December"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Risk Adjustment"), "Net balance at 31 December"] + self.Reins_Analysis_by_measurement_component.loc[ (self.Reins_Analysis_by_measurement_component['Period'] == i) & (self.Reins_Analysis_by_measurement_component['Measure'] == "Contractual Service Margin"), "Net balance at 31 December"]
            
            self.BEL.append(self.Reconciliation_of_Best_Estimate_Liability)
            self.RA.append(self.Reconciliation_of_Risk_Adjustment)
            self.CSM.append(self.Reconciliation_of_Contractual_Service_Margin)
            self.TCL.append(self.Reconciliation_of_Total_Contract_Liability)
            self.AMC.append(self.Analysis_by_measurement_component)

            self.Reins_BEL.append(self.Reconciliation_of_Reins_Best_Estimate_Liability)
            self.Reins_RA.append(self.Reconciliation_of_Reins_Risk_Adjustment)
            self.Reins_CSM.append(self.Reconciliation_of_Reins_Contractual_Service_Margin)
            self.Reins_TCL.append(self.Reconciliation_of_Reins_Total_Contract_Liability)
            self.Reins_AMC.append(self.Reins_Analysis_by_measurement_component)


        self.BEL = pd.concat(self.BEL)
        self.RA = pd.concat(self.RA)
        self.CSM = pd.concat(self.CSM)
        self.TCL = pd.concat(self.TCL)
        self.AMC = pd.concat(self.AMC)

        self.Reins_BEL = pd.concat(self.Reins_BEL)
        self.Reins_RA = pd.concat(self.Reins_RA)
        self.Reins_CSM = pd.concat(self.Reins_CSM)
        self.Reins_TCL = pd.concat(self.Reins_TCL)
        self.Reins_AMC = pd.concat(self.Reins_AMC)
        
        self.BEL = pd.DataFrame(self.BEL).reset_index()
        self.BEL['Period'] = self.BEL['Period'].map(map_keys_to_dates)
        self.RA = pd.DataFrame(self.RA).reset_index()
        self.RA['Period'] = self.RA['Period'].map(map_keys_to_dates)
        self.CSM = pd.DataFrame(self.CSM).reset_index()
        self.CSM['Period'] = self.CSM['Period'].map(map_keys_to_dates)
        self.TCL = pd.DataFrame(self.TCL).reset_index()
        self.TCL['Period'] = self.TCL['Period'].map(map_keys_to_dates)
        self.AMC = pd.DataFrame(self.AMC)
        self.AMC['Period'] = self.AMC['Period'].map(map_keys_to_dates)
   
        self.Reins_BEL = pd.DataFrame(self.Reins_BEL).reset_index()
        self.Reins_BEL['Period'] = self.Reins_BEL['Period'].map(map_keys_to_dates)
        self.Reins_RA = pd.DataFrame(self.Reins_RA).reset_index()
        self.Reins_RA['Period'] = self.Reins_RA['Period'].map(map_keys_to_dates)
        self.Reins_CSM = pd.DataFrame(self.Reins_CSM).reset_index()
        self.Reins_CSM['Period'] = self.Reins_CSM['Period'].map(map_keys_to_dates)
        self.Reins_TCL = pd.DataFrame(self.Reins_TCL).reset_index()
        self.Reins_TCL['Period'] = self.Reins_TCL['Period'].map(map_keys_to_dates)
        self.Reins_AMC = pd.DataFrame(self.Reins_AMC)
        self.Reins_AMC['Period'] = self.Reins_AMC['Period'].map(map_keys_to_dates)

        if self.Parameters.loc[3, "Selection"] == "VFA":
            self.BEL = self.BEL
            self.RA = self.RA
            self.CSM = self.CSM
            self.TCL = self.TCL
            self.Reins_BEL = self.Reins_BEL
            self.Reins_RA = self.Reins_RA
            self.Reins_CSM = self.Reins_CSM
            self.Reins_TCL = self.Reins_TCL       
        elif self.Parameters.loc[3, "Selection"] == "GMM": 
            self.BEL = self.BEL.drop('Change in Fair Value of UI',axis =1)
            self.RA = self.RA.drop('Change in Fair Value of UI',axis =1)
            self.CSM = self.CSM.drop('Change in Fair Value of UI',axis =1)
            self.TCL = self.TCL.drop('Change in Fair Value of UI',axis =1)
            self.Reins_BEL = self.Reins_BEL.drop('Change in Fair Value of UI',axis =1)
            self.Reins_RA = self.Reins_RA.drop('Change in Fair Value of UI',axis =1)
            self.Reins_CSM = self.Reins_CSM.drop('Change in Fair Value of UI',axis =1)
            self.Reins_TCL = self.Reins_TCL.drop('Change in Fair Value of UI',axis =1)
         

        # self.BEL = self.BEL.to_csv('Reconciliation_of_Best_Estimate_Liability.csv')
        # self.RA = self.RA.to_csv('Reconciliation_of_Risk_Adjustment.csv')
        # self.CSM = self.CSM.to_csv('Reconciliation_of_Contractual_Service_Margin.csv')
        # self.TCL = self.TCL.to_csv('Reconciliation_of_Total_Contract_Liability.csv')
        # self.AMC = self.AMC.to_csv('Analysis_by_measurement_component.csv')

        # self.Reins_BEL = self.Reins_BEL.to_csv('Reconciliation_of_Reins_Best_Estimate_Liability.csv')
        # self.Reins_RA = self.Reins_RA.to_csv('Reconciliation_of_Reins_Risk_Adjustment.csv')
        # self.Reins_CSM = self.Reins_CSM.to_csv('Reconciliation_of_Reins_Contractual_Service_Margin.csv')
        # self.Reins_TCL = self.Reins_TCL.to_csv('Reconciliation_of_Reins_Total_Contract_Liability.csv')
        # self.Reins_AMC = self.Reins_AMC.to_csv('Reins_Analysis_by_measurement_component.csv')
        
        # Analysis by remaining Coverage
        data_2 = pd.pivot_table(
            assumptions,
            index=['index', 'Product', 'Sub-Product', 'BusinessType', 'Key'],
            aggfunc={
                'Gross_BE': 'sum',
                'Gross_LossC_BE': 'sum',
                'Gross_RA': 'sum',
                'Gross_LossC_RA': 'sum',
                'Gross_CSM': 'sum',
                'Gross_Actual_BE': 'sum',
                'Gross_Actual_RA': 'sum',
                'Gross_Actual_CSM': 'sum',
                'Reins_BE': 'sum',
                'Reins_LossC_BE': 'sum',
                'Reins_RA': 'sum',
                'Reins_LossC_RA': 'sum',
                'Reins_CSM': 'sum',
                'Reins_Actual_BE': 'sum',
                'Reins_Actual_RA': 'sum',
                'Reins_Actual_CSM': 'sum'
            })

        data_2 = data_2.reset_index()

        data_dict_2 = {
            'assumption_' + str(i): grp
            for i, grp in data_2.groupby(['Product', 'Sub-Product'])
        }

        
        for group in data_dict_2:
            Cohort_2 = data_dict_2[group]
            product_name = Cohort_2['Product'].unique()
            subproduct_name = Cohort_2['Sub-Product'].unique()

            self.Assumptions = Cohort_2

        
            # Analysis_by_remaining_coverage
            count = 0
            for i in range(0,len(dates['index'])):
                for s in measure_abrc:
                    entry = pd.DataFrame(
                        {
                            'Period':
                            i,
                            'Measure':
                            s,
                            "Product":
                            product_name,
                            "Sub-Product":
                            subproduct_name,
                            'Net balance at 1 January':
                            0,
                            'Changes in the statement of profit and loss and OCI':
                            0,
                            'Other contracts recognised':
                            0,
                            'Expected incurred claims and other insurance services expenses':
                            0,
                            'Amortisation of insurance acquisition cash flows':
                            0,
                            'Losses and reversals of losses on onerous contracts':
                            0,
                            'Adjustments to liabilities for incurred claims':
                            0,
                            'Insurance service result':
                            0,
                            'Net finance expenses from insurance contracts':
                            0,
                            'Effect of movement in exchange rates':
                            0,
                            'Investment components and premium refunds':
                            0,
                            'Total changes in the statement of profit and loss and OCI':
                            0,
                            'Premiums received':
                            0,
                            'Actual claims and other expenses paid':
                            0,
                            'Insurance acquisition cash flows':
                            0,
                            'Total cash flows':
                            0,
                            'Other items transfer in the statement of financial position':
                            0,
                            'Net balance at 31 December':
                            0
                        },
                        index=[0])
                    if count == 0:
                        self.Analysis_by_remaining_coverage = entry
                        self.Reins_Analysis_by_remaining_coverage = entry
                    else:

                        self.Analysis_by_remaining_coverage = pd.concat(
                            [self.Analysis_by_remaining_coverage, entry],
                            axis=0)
                        self.Reins_Analysis_by_remaining_coverage = pd.concat(
                            [self.Reins_Analysis_by_remaining_coverage, entry],
                            axis=0)

                    count += 1
                # Analysis_by_remaining_coverage (Gross)
                if i == start_date:
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 1 January"] = 0 
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Net balance at 1 January"] = 0
                    self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net balance at 1 January"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP000') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'])+iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP000') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA'])+iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP000') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM'])
                    self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Total"), "Net balance at 1 January"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 1 January"]+self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Net balance at 1 January"]+self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net balance at 1 January"]
                else:
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 1 January"] = self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i - 1) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 31 December"]
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Net balance at 1 January"] = self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i - 1) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Net balance at 31 December"] 
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Net balance at 1 January"] = self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i - 1) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net balance at 31 December"] 
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Net balance at 1 January"] = self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i - 1) & (self.Analysis_by_remaining_coverage['Measure'] == "Total"), "Net balance at 31 December"]

                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Other contracts recognised"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP004') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP004') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP004') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'NB'), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self. Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_CSM'])

                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Other contracts recognised"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP004') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE']) +iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP004') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self. Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_LossC_RA']) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Gross_LossC_RA'])
                self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Other contracts recognised"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006' ) & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & ( self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_RA']) + iferror( self.Assumptions. loc[(self.Assumptions[ 'Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Gross_LossC_RA'])    
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Other contracts recognised"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Other contracts recognised"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Other contracts recognised"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Other contracts recognised"]
                
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Expected incurred claims and other insurance services expenses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) - (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM'])) 
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Expected incurred claims and other insurance services expenses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA']) 
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Expected incurred claims and other insurance services expenses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM']) +  iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_RA']) 
                    
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Expected incurred claims and other insurance services expenses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) - (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM'])) +iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM']))  
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Expected incurred claims and other insurance services expenses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA']) +iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA'])
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Expected incurred claims and other insurance services expenses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM']) +  iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_RA']) +iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM']) +  iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_RA']) 
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Expected incurred claims and other insurance services expenses"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Expected incurred claims and other insurance services expenses"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Expected incurred claims and other insurance services expenses"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Expected incurred claims and other insurance services expenses"]

                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Losses and reversals of losses on onerous contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM'])
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Losses and reversals of losses on onerous contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA'])
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Losses and reversals of losses on onerous contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_RA'])
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Losses and reversals of losses on onerous contracts"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Losses and reversals of losses on onerous contracts"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Losses and reversals of losses on onerous contracts"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Losses and reversals of losses on onerous contracts"]


                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Adjustments to liabilities for incurred claims"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM'])
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Adjustments to liabilities for incurred claims"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA'])
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Adjustments to liabilities for incurred claims"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_RA'])
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Adjustments to liabilities for incurred claims"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Adjustments to liabilities for incurred claims"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Adjustments to liabilities for incurred claims"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Adjustments to liabilities for incurred claims"]

                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Insurance service result"] =  self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Other contracts recognised"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Expected incurred claims and other insurance services expenses"] + self.Analysis_by_remaining_coverage.loc[ (self. Analysis_by_remaining_coverage['Period'] == i) & (self. Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Losses and reversals of losses on onerous contracts"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage[ 'Period'] == i) & (self.Analysis_by_remaining_coverage[ 'Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Adjustments to liabilities for incurred claims"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Insurance service result"] = self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Other contracts recognised"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Expected incurred claims and other insurance services expenses"] + self.Analysis_by_remaining_coverage.loc[ (self. Analysis_by_remaining_coverage['Period'] == i) & (self. Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Losses and reversals of losses on onerous contracts"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage[ 'Period'] == i) & (self.Analysis_by_remaining_coverage[ 'Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Adjustments to liabilities for incurred claims"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Insurance service result"] = self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Other contracts recognised"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Expected incurred claims and other insurance services expenses"] + self.Analysis_by_remaining_coverage.loc[ (self. Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Losses and reversals of losses on onerous contracts"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage[ 'Period'] == i) & (self. Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Adjustments to liabilities for incurred claims"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Insurance service result"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Insurance service result"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Insurance service result"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Insurance service result"]
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net finance expenses from insurance contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM'])
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Net finance expenses from insurance contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA'])
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net finance expenses from insurance contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_RA'])
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net finance expenses from insurance contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_CSM'])
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Net finance expenses from insurance contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_LossC_RA'])
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net finance expenses from insurance contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Gross_LossC_RA'])
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Net finance expenses from insurance contracts"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net finance expenses from insurance contracts"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Net finance expenses from insurance contracts"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net finance expenses from insurance contracts"]

                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Investment components and premium refunds"] = self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net finance expenses from insurance contracts"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Effect of movement in exchange rates"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Investment components and premium refunds"] = self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Net finance expenses from insurance contracts"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Effect of movement in exchange rates"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Investment components and premium refunds"] = self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net finance expenses from insurance contracts"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Effect of movement in exchange rates"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Investment components and premium refunds"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Investment components and premium refunds"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Investment components and premium refunds"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Investment components and premium refunds"]

                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Total changes in the statement of profit and loss and OCI"] = self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Insurance service result"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Investment components and premium refunds"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Total changes in the statement of profit and loss and OCI"] = self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Insurance service result"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Investment components and premium refunds"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Total changes in the statement of profit and loss and OCI"] = self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Insurance service result"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Investment components and premium refunds"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Total changes in the statement of profit and loss and OCI"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Total changes in the statement of profit and loss and OCI"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Total changes in the statement of profit and loss and OCI"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Total changes in the statement of profit and loss and OCI"]

                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Premiums received"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP002') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_Actual_BE'])
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Premiums received"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Premiums received"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Premiums received"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Premiums received"]
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Actual claims and other expenses paid"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_Actual_CSM'])
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Actual claims and other expenses paid"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_Actual_CSM'])
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Actual claims and other expenses paid"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_Actual_CSM'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_Actual_CSM'])
                    self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Actual claims and other expenses paid"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_Actual_CSM'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_Actual_CSM'])
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Actual claims and other expenses paid"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Actual claims and other expenses paid"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Actual claims and other expenses paid"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Actual claims and other expenses paid"]

                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Insurance acquisition cash flows"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Gross_Actual_CSM'])
                self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Insurance acquisition cash flows"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Gross_Actual_CSM'])
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Insurance acquisition cash flows"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Insurance acquisition cash flows"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Insurance acquisition cash flows"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Insurance acquisition cash flows"]

                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Total cash flows"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Premiums received"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Actual claims and other expenses paid"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Insurance acquisition cash flows"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Total cash flows"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Premiums received"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Actual claims and other expenses paid"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Insurance acquisition cash flows"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Total cash flows"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Premiums received"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Actual claims and other expenses paid"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Insurance acquisition cash flows"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Total cash flows"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Total cash flows"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Total cash flows"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Total cash flows"]

                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 31 December"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 1 January"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Total changes in the statement of profit and loss and OCI"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Total cash flows"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Other items transfer in the statement of financial position"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Net balance at 31 December"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Net balance at 1 January"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Total changes in the statement of profit and loss and OCI"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Total cash flows"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Other items transfer in the statement of financial position"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Net balance at 31 December"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Net balance at 1 January"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Total changes in the statement of profit and loss and OCI"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Total cash flows"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Other items transfer in the statement of financial position"]
                self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Total" ), "Net balance at 31 December"] = self.Analysis_by_remaining_coverage.loc[( self.Analysis_by_remaining_coverage['Period'] == i ) & ( self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 31 December"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Net balance at 31 December"] + self.Analysis_by_remaining_coverage.loc[ (self.Analysis_by_remaining_coverage['Period'] == i ) & (self.Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net balance at 31 December"]
            
                # Analysis_by_remaining_coverage (Reins)
                if i == start_date:
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 1 January"] = 0 
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Net balance at 1 January"] = 0
                    self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net balance at 1 January"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP000') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'])+iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP000') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA'])+iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP000') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM'])
                    self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total"), "Net balance at 1 January"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 1 January"]+self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Net balance at 1 January"]+self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net balance at 1 January"]
                else:
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 1 January"] = self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i - 1) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 31 December"]
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Net balance at 1 January"] = self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i - 1) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Net balance at 31 December"] 
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Net balance at 1 January"] = self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i - 1) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net balance at 31 December"] 
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Net balance at 1 January"] = self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i - 1) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total"), "Net balance at 31 December"]

                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Other contracts recognised"] = -iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP004') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP004') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP004') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'NB'), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self. Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_CSM'])

                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Other contracts recognised"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP004') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE']) +iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP004') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self. Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_LossC_RA']) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'NB'), 'Reins_LossC_RA'])
                self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Other contracts recognised"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP006' ) & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & ( self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_RA']) + iferror( self.Assumptions. loc[(self.Assumptions[ 'Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_CSM'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP001') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP005') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP006') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP008') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP009') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP011') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_RA'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_BE'] ) + iferror( self.Assumptions.loc[ (self. Assumptions['Key'] == 'MAP014') & (self.Assumptions['index'] == i) & (self.Assumptions[ 'BusinessType'] == 'IF'), 'Reins_LossC_RA'])    
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Other contracts recognised"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Other contracts recognised"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Other contracts recognised"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Other contracts recognised"]
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Expected incurred claims and other insurance services expenses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) - (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM'])) 
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Expected incurred claims and other insurance services expenses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA']) 
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Expected incurred claims and other insurance services expenses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM']) +  iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_RA']) 
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Expected incurred claims and other insurance services expenses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM'])) +iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + (iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM']))
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Expected incurred claims and other insurance services expenses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA']) 
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Expected incurred claims and other insurance services expenses"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM']) +  iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP013') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_RA']) +iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM']) +  iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP021') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_RA'])
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Expected incurred claims and other insurance services expenses"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Expected incurred claims and other insurance services expenses"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Expected incurred claims and other insurance services expenses"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Expected incurred claims and other insurance services expenses"]

                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Losses and reversals of losses on onerous contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM'])
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Losses and reversals of losses on onerous contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA'])
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Losses and reversals of losses on onerous contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP018') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_RA'])
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Losses and reversals of losses on onerous contracts"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Losses and reversals of losses on onerous contracts"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Losses and reversals of losses on onerous contracts"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Losses and reversals of losses on onerous contracts"]


                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Adjustments to liabilities for incurred claims"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM'])
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Adjustments to liabilities for incurred claims"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA'])
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Adjustments to liabilities for incurred claims"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP017') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_RA'])
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Adjustments to liabilities for incurred claims"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Adjustments to liabilities for incurred claims"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Adjustments to liabilities for incurred claims"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Adjustments to liabilities for incurred claims"]

                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Insurance service result"] =  self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Other contracts recognised"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Expected incurred claims and other insurance services expenses"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self. Analysis_by_remaining_coverage['Period'] == i) & (self. Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Losses and reversals of losses on onerous contracts"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage[ 'Period'] == i) & (self.Reins_Analysis_by_remaining_coverage[ 'Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Adjustments to liabilities for incurred claims"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Insurance service result"] = self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Other contracts recognised"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Expected incurred claims and other insurance services expenses"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self. Analysis_by_remaining_coverage['Period'] == i) & (self. Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Losses and reversals of losses on onerous contracts"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage[ 'Period'] == i) & (self.Reins_Analysis_by_remaining_coverage[ 'Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Adjustments to liabilities for incurred claims"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Insurance service result"] = self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Other contracts recognised"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Expected incurred claims and other insurance services expenses"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self. Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Losses and reversals of losses on onerous contracts"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage[ 'Period'] == i) & (self. Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Adjustments to liabilities for incurred claims"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Insurance service result"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Insurance service result"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Insurance service result"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Insurance service result"]
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net finance expenses from insurance contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM'])
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Net finance expenses from insurance contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA'])
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net finance expenses from insurance contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_RA'])
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net finance expenses from insurance contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_CSM'])
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Net finance expenses from insurance contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA'])+ iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_BE']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_LossC_RA'])
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net finance expenses from insurance contracts"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA']) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP007') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP010') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP022') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP023') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP024') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_RA'])+ iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_BE'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_RA']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_CSM'] ) + iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_BE']) + iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP025') & (self.Assumptions['index'] == i) & (self. Assumptions['BusinessType'] == 'IF'), 'Reins_LossC_RA'])
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Net finance expenses from insurance contracts"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net finance expenses from insurance contracts"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Net finance expenses from insurance contracts"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net finance expenses from insurance contracts"]

                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Investment components and premium refunds"] = self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net finance expenses from insurance contracts"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Effect of movement in exchange rates"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Investment components and premium refunds"] = self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Net finance expenses from insurance contracts"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Effect of movement in exchange rates"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Investment components and premium refunds"] = self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net finance expenses from insurance contracts"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Effect of movement in exchange rates"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Investment components and premium refunds"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Investment components and premium refunds"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Investment components and premium refunds"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Investment components and premium refunds"]

                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Total changes in the statement of profit and loss and OCI"] = self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Insurance service result"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Investment components and premium refunds"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Total changes in the statement of profit and loss and OCI"] = self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Insurance service result"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Investment components and premium refunds"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Total changes in the statement of profit and loss and OCI"] = self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Insurance service result"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Investment components and premium refunds"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Total changes in the statement of profit and loss and OCI"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Total changes in the statement of profit and loss and OCI"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Total changes in the statement of profit and loss and OCI"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Total changes in the statement of profit and loss and OCI"]

                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Premiums received"] = iferror(self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP002') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_Actual_BE'])
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Premiums received"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Premiums received"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Premiums received"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Premiums received"]
                if self.Parameters.loc[3, "Selection"] == "GMM":
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Actual claims and other expenses paid"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_Actual_CSM'])
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Actual claims and other expenses paid"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_Actual_CSM'])
                elif self.Parameters.loc[3, "Selection"] == "VFA":
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Actual claims and other expenses paid"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_Actual_CSM'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_Actual_CSM'])
                    self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Actual claims and other expenses paid"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP012') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_Actual_CSM'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP020') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_Actual_CSM'])
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Actual claims and other expenses paid"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Actual claims and other expenses paid"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Actual claims and other expenses paid"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Actual claims and other expenses paid"]

                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Insurance acquisition cash flows"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'NB'), 'Reins_Actual_CSM'])
                self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Insurance acquisition cash flows"] = iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_Actual_BE'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_Actual_RA'])+iferror( self.Assumptions.loc[ (self.Assumptions['Key'] == 'MAP015') & (self.Assumptions['index'] == i) & (self.Assumptions['BusinessType'] == 'IF'), 'Reins_Actual_CSM'])
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Insurance acquisition cash flows"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Insurance acquisition cash flows"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Insurance acquisition cash flows"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Insurance acquisition cash flows"]

                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Total cash flows"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Premiums received"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Actual claims and other expenses paid"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Insurance acquisition cash flows"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Total cash flows"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Premiums received"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Actual claims and other expenses paid"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Insurance acquisition cash flows"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Total cash flows"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Premiums received"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Actual claims and other expenses paid"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Insurance acquisition cash flows"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Total cash flows"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Total cash flows"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Total cash flows"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Total cash flows"]

                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 31 December"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 1 January"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Total changes in the statement of profit and loss and OCI"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Total cash flows"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Other items transfer in the statement of financial position"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Net balance at 31 December"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Net balance at 1 January"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Total changes in the statement of profit and loss and OCI"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Total cash flows"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss component" ), "Other items transfer in the statement of financial position"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Net balance at 31 December"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims" ), "Net balance at 1 January"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Total changes in the statement of profit and loss and OCI"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Total cash flows"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Other items transfer in the statement of financial position"]
                self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Total" ), "Net balance at 31 December"] = self.Reins_Analysis_by_remaining_coverage.loc[( self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & ( self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Excluding loss component" ), "Net balance at 31 December"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for remaining coverage - Only Loss Component" ), "Net balance at 31 December"] + self.Reins_Analysis_by_remaining_coverage.loc[ (self.Reins_Analysis_by_remaining_coverage['Period'] == i ) & (self.Reins_Analysis_by_remaining_coverage['Measure'] == "Liabilities for incurred claims"), "Net balance at 31 December"]


            self.ARC.append(self.Analysis_by_remaining_coverage)
            self.Reins_ARC.append(self.Reins_Analysis_by_remaining_coverage)


        self.ARC = pd.concat(self.ARC)
        self.Reins_ARC = pd.concat(self.Reins_ARC)

        self.ARC = pd.DataFrame(self.ARC)
        self.ARC['Period'] = self.ARC['Period'].map(map_keys_to_dates)

        self.Reins_ARC = pd.DataFrame(self.Reins_ARC)
        self.Reins_ARC['Period'] = self.Reins_ARC['Period'].map(map_keys_to_dates)

        # self.ARC = self.ARC.to_csv('Analysis_by_remaining_coverage.csv')
        # self.Reins_ARC = self.Reins_ARC.to_csv('Reins_Analysis_by_remaining_coverage.csv')
        
        host="gmm-test2.clmunxh5zi0n.ap-south-1.rds.amazonaws.com"
        port=int(3306)
        user='keshav'
        passw='keshavsingh'
        database='gmm'
        
        mydb = create_engine("mysql+pymysql://" + user + ':' + passw + '@' + host + ':' + str(port) + '/' + database , echo=False)

        self.BEL.to_sql(name='BEL', con=mydb, if_exists = 'replace', index=True)
        self.RA.to_sql(name='RA', con=mydb, if_exists = 'replace', index=True)
        self.CSM.to_sql(name='CSM', con=mydb, if_exists = 'replace', index=True)
        self.TCL.to_sql(name='TCL', con=mydb, if_exists = 'replace', index=True)
        self.AMC.to_sql(name='AMC', con=mydb, if_exists = 'replace', index=False)
        self.ARC.to_sql(name='ARC', con=mydb, if_exists = 'replace', index=False)

        self.Reins_BEL.to_sql(name='Reins_BEL', con=mydb, if_exists = 'replace', index=True)
        self.Reins_RA.to_sql(name='Reins_RA', con=mydb, if_exists = 'replace', index=True)
        self.Reins_CSM.to_sql(name='Reins_CSM', con=mydb, if_exists = 'replace', index=True)
        self.Reins_TCL.to_sql(name='Reins_TCL', con=mydb, if_exists = 'replace', index=True)
        self.Reins_AMC.to_sql(name='Reins_AMC', con=mydb, if_exists = 'replace', index=False)
        self.Reins_ARC.to_sql(name='Reins_ARC', con=mydb, if_exists = 'replace', index=False)


Reporting_Engine(assumptions,parameters)